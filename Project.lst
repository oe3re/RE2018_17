Microsoft (R) Macro Assembler Version 14.13.26131.1	    06/25/18 21:13:28
projekat.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

 = 00000050			BufSize = 80
 = 000002BC			FileBuffSize = 700

 00000000			.data
 = 0dh,0ah			endl EQU <0dh,0ah>			; end of line sequence

 00000000			brojIgraca LABEL BYTE
 00000000  55 6E 65 73 69		BYTE "Unesite broj igraca. ", endl
	   74 65 20 62 72
	   6F 6A 20 69 67
	   72 61 63 61 2E
	   20 0D 0A
 00000017 00000017		brojIgracaSize DWORD ($-brojIgraca)

 0000001B 49 67 72 61 63	igracTekst BYTE "Igrac "
	   20
 00000021			brojeviIgraca LABEL BYTE
 00000021  20 75 6E 65 73		BYTE " unesite svoje brojeve:", endl
	   69 74 65 20 73
	   76 6F 6A 65 20
	   62 72 6F 6A 65
	   76 65 3A 0D 0A
 0000003A 00000019		brojeviIgracaSize DWORD ($-brojeviIgraca)

 0000003E 000003E8		tajmer DWORD 1000
 00000042 00			filename BYTE 0, 33 DUP(0)
	   00000021 [
	    00
	   ]
 00000064 50 6C 61 79 65	filenameBase BYTE "PlayerSum_"
	   72 53 75 6D 5F
 0000006E 2E 74 78 74		filenameEnd BYTE ".txt"
 00000072  00000006 [		intBuffer BYTE 6 DUP(0)
	    00
	   ]
 00000078  0000000A [		intBuffer10 BYTE 10 DUP(0)
	    00
	   ]
 00000082  00000001 [		brojPogodaka BYTE 1 DUP(0)
	    00
	   ]
 00000083  00000001 [		osvojeniPoeni BYTE 1 DUP (0)
	    00
	   ]
 00000084 00			ukupniPoeni BYTE 0
 00000085 01			pobednik BYTE 1
 00000086 00			pobednikPoeni BYTE 0
 00000087 30 0D 0A		nulaPoena BYTE 30h, 0dh, 0ah 
 0000008A 31 30 0D 0A		desetPoena BYTE  31h, 30h, 0dh, 0ah
 0000008E 35 30 0D 0A		pedesetPoena BYTE 35h, 30h, 0dh, 0ah
 00000092  0000001F [		stringBuffer BYTE 31 DUP(0)
	    00
	   ]
 000000B1 00000000		stringBufferSize DWORD 0
 000000B5 49 44 20 69 67	idIgraca BYTE "ID igraca:"
	   72 61 63 61 3A
 000000BF  00000014 [		crtice BYTE 20 DUP('-'), endl
	    2D
	   ] 0D 0A
 000000D5 42 72 6F 6A 20	brPartije BYTE "Broj partije:"
	   70 61 72 74 69
	   6A 65 3A
 000000E2 4B 6F 6D 62 69	kombinacija BYTE "Kombinacija:"
	   6E 61 63 69 6A
	   61 3A
 000000EE 49 7A 76 75 63	izvuceniBrojevi BYTE "Izvuceni brojevi:"
	   65 6E 69 20 62
	   72 6F 6A 65 76
	   69 3A
 000000FF 49 7A 76 75 63	dobijeniBrojevi BYTE "Izvuceni brojevi:", endl
	   65 6E 69 20 62
	   72 6F 6A 65 76
	   69 3A 0D 0A
 00000112 42 72 6F 6A 20	brojPoena BYTE "Broj osvojenih poena:"
	   6F 73 76 6F 6A
	   65 6E 69 68 20
	   70 6F 65 6E 61
	   3A
 00000127 55 6B 75 70 6E	ukupnoPoena BYTE "Ukupno osvojenih poena:"
	   6F 20 6F 73 76
	   6F 6A 65 6E 69
	   68 20 70 6F 65
	   6E 61 3A
 0000013E 50 6F 62 65 64	pobednikTekst BYTE "Pobednik je igrac broj "
	   6E 69 6B 20 6A
	   65 20 69 67 72
	   61 63 20 62 72
	   6F 6A 20
 00000155 50 72 65 6F 73	preostalePartijeTekst BYTE "Preostale partije: "
	   74 61 6C 65 20
	   70 61 72 74 69
	   6A 65 3A 20
 00000168 00			preostalePartije BYTE ?
 00000169 00			byteIspis BYTE ?
 0000016A 50 6F 6E 6F 76	ponovoUnesiBrojeveTekst BYTE "Ponovo unesi brojeve:", endl
	   6F 20 75 6E 65
	   73 69 20 62 72
	   6F 6A 65 76 65
	   3A 0D 0A
 00000181 00			ponoviBrojeve BYTE 0


 00000182 0D 0A			endline BYTE endl
 00000184 4B			pretraga BYTE 'K'
 00000185 0000000B		pretragaOffset DWORD 11


				; Console handles
 00000189 00000000		outputHandle HANDLE 0     ; handle to standard output device
 0000018D 00000000		inputHandle  HANDLE 0	  ; handle to std input device
 00000191 00000000		bytesWritten  DWORD ?      ; number of bytes written

 00000195			ptrConsoleInfo LABEL WORD
 00000195 0000 0000 0000	consoleInfo CONSOLE_SCREEN_BUFFER_INFO <>
	   0000 0000 0000
	   0000 0000 0000
	   0000 0000
 000001AB 0000			xCursor WORD ?
 000001AD 0000			yCursor WORD ?
 000001AF			ptrCursorPosition LABEL WORD
 000001AF 0000 0000		cursorPosition COORD <>
 000001B3 0000 0000		kursorNaPocetak COORD <0,0> ;; pomocna promenljiva za postavljanje kursora na pocetak, koristi se prilikom ispisa preostalih partija


 000001B7  00000050 [		buffer BYTE BufSize DUP(?)
	    00
	   ]
 00000207  000002BC [		fileBuffer BYTE FileBuffSize DUP(?)
	    00
	   ]
 000004C3 00000000		bytesRead   DWORD ?

 000004C7			brojacIgraca LABEL BYTE 
 000004C7 00000000		brIgr	DWORD ?
 000004CB 00			trenutniIgrac BYTE 0
 000004CC 00			brojPartije BYTE ?

				; Files
 000004CD 00000000		fileHandle HANDLE ?


 00000000			.code
 00000000			main PROC
					;call compareBuffers

				  ; Get the console output and input handle:
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000000  6A F5	   *	    push    -00000000Bh
 00000002  E8 00000000 E   *	    call   GetStdHandle
 00000007  A3 00000189 R		mov outputHandle,eax
					INVOKE GetStdHandle, STD_INPUT_HANDLE
 0000000C  6A F6	   *	    push    -00000000Ah
 0000000E  E8 00000000 E   *	    call   GetStdHandle
 00000013  A3 0000018D R		mov inputHandle,eax
					
 00000018  E8 00000000 E		call Clrscr
				    ; Write a string to the console:
					INVOKE WriteConsole,
					  outputHandle,		; console output handle
					  ADDR brojIgraca,       	; string pointer
					  brojIgracaSize,			; string length
					  ADDR bytesWritten,	; returns num bytes written
					  0					; not used	
 0000001D  6A 00	   *	    push   +000000000h
 0000001F  68 00000191 R   *	    push   OFFSET bytesWritten
 00000024  FF 35 00000017 R *	    push   brojIgracaSize
 0000002A  68 00000000 R   *	    push   OFFSET brojIgraca
 0000002F  FF 35 00000189 R *	    push   outputHandle
 00000035  E8 00000000 E   *	    call   WriteConsoleA
					
				    ;Read number of players
					INVOKE ReadConsole, inputHandle, ADDR buffer,
					  BufSize, ADDR bytesRead, 0
 0000003A  6A 00	   *	    push   +000000000h
 0000003C  68 000004C3 R   *	    push   OFFSET bytesRead
 00000041  6A 50	   *	    push   +000000050h
 00000043  68 000001B7 R   *	    push   OFFSET buffer
 00000048  FF 35 0000018D R *	    push   inputHandle
 0000004E  E8 00000000 E   *	    call   ReadConsoleA
					
					;kod za citanje broja igraca iz BUFFERA u ebx
 00000053  33 C0			xor eax,eax
 00000055  33 DB			xor ebx,ebx
 00000057  BE 000001B7 R		mov esi, OFFSET buffer
 0000005C  AC				LODSB
 0000005D  8B D8			mov ebx, eax
 0000005F  83 EB 30			sub ebx, 30h
 00000062  AC				LODSB
 00000063  83 F8 0D			cmp eax, 0Dh
 00000066  74 08			je  skok1
 00000068  6B DB 0A			imul ebx, 10
 0000006B  83 E8 30			sub eax, 30h
 0000006E  03 D8			add ebx, eax
					;prebacimo broj igraca iz ebx u brIgr
 00000070			skok1:	
 00000070  89 1D 000004C7 R		mov brIgr, ebx

					
					;ovde loopujemo, svaki put kada pravimo novi fajl.
					;Upisujemo ID igraca u svaki fajl
 00000076			pravljenjeFajlova:	
 00000076  FE 05 000004CB R		inc trenutniIgrac
					
 0000007C  E8 000003A4			call getFilename
					
 00000081  BA 00000042 R		mov	edx,OFFSET filename
 00000086  E8 00000000 E		call	CreateOutputFile
 0000008B  A3 000004CD R		mov	fileHandle,eax
 00000090  BA 000000B5 R		mov edx, OFFSET idIgraca
 00000095  B9 0000000A			mov ecx, SIZEOF idIgraca
 0000009A  E8 00000000 E		call WriteToFile
 0000009F  A1 000004CD R		mov eax, fileHandle
 000000A4  80 05 000004CB R		add trenutniIgrac, 30h
	   30
 000000AB  BA 000004CB R		mov edx,  OFFSET trenutniIgrac 
 000000B0  B9 00000001			mov ecx, SIZEOF trenutniIgrac
 000000B5  E8 00000000 E		call WriteToFile
 000000BA  80 2D 000004CB R		sub trenutniIgrac, 30h
	   30
 000000C1  A1 000004CD R		mov eax, fileHandle
 000000C6  BA 00000182 R		mov edx, OFFSET endline
 000000CB  B9 00000002			mov ecx, SIZEOF endline
 000000D0  E8 00000000 E		call WriteToFile
 000000D5  A1 000004CD R		mov eax, fileHandle
 000000DA  E8 00000000 E		call CloseFile


 000000DF  A0 000004CB R		mov al, trenutniIgrac
 000000E4  3A 05 000004C7 R		cmp al, brojacIgraca
 000000EA  75 8A			jne pravljenjeFajlova
					
					;upis brojeva u fajlove
 000000EC  C6 05 000004CC R		mov brojPartije, 1h
	   01

 000000F3			sledecaPartija:
 000000F3  C6 05 000004CB R		mov trenutniIgrac, 0h
	   00
 000000FA  E8 00000000 E		call Clrscr
 000000FF  E8 0000071E			call printPreostalePartije

				;; Upisujemo brojeve igraca u njihove fajlove
 00000104			upisivanjeUnetihBrojeva:
 00000104  FE 05 000004CB R		inc trenutniIgrac
 0000010A  E8 00000316			call getFilename
					
					INVOKE WriteConsole, outputHandle, ADDR igracTekst, LENGTHOF igracTekst ,	ADDR bytesWritten, 0	
 0000010F  6A 00	   *	    push   +000000000h
 00000111  68 00000191 R   *	    push   OFFSET bytesWritten
 00000116  6A 06	   *	    push   +000000006h
 00000118  68 0000001B R   *	    push   OFFSET igracTekst
 0000011D  FF 35 00000189 R *	    push   outputHandle
 00000123  E8 00000000 E   *	    call   WriteConsoleA
						
 00000128  80 05 000004CB R		add trenutniIgrac, 30h
	   30
					INVOKE WriteConsole, outputHandle, ADDR trenutniIgrac, 1,	ADDR bytesWritten, 0	
 0000012F  6A 00	   *	    push   +000000000h
 00000131  68 00000191 R   *	    push   OFFSET bytesWritten
 00000136  6A 01	   *	    push   +000000001h
 00000138  68 000004CB R   *	    push   OFFSET trenutniIgrac
 0000013D  FF 35 00000189 R *	    push   outputHandle
 00000143  E8 00000000 E   *	    call   WriteConsoleA
 00000148  80 2D 000004CB R		sub trenutniIgrac, 30h
	   30
						
					INVOKE WriteConsole, outputHandle, ADDR brojeviIgraca, brojeviIgracaSize,	ADDR bytesWritten, 0	
 0000014F  6A 00	   *	    push   +000000000h
 00000151  68 00000191 R   *	    push   OFFSET bytesWritten
 00000156  FF 35 0000003A R *	    push   brojeviIgracaSize
 0000015C  68 00000021 R   *	    push   OFFSET brojeviIgraca
 00000161  FF 35 00000189 R *	    push   outputHandle
 00000167  E8 00000000 E   *	    call   WriteConsoleA
					;Read number of players

 0000016C			ponoviUnos:
					INVOKE ReadConsole, inputHandle, ADDR buffer, BufSize, ADDR bytesRead, 0
 0000016C  6A 00	   *	    push   +000000000h
 0000016E  68 000004C3 R   *	    push   OFFSET bytesRead
 00000173  6A 50	   *	    push   +000000050h
 00000175  68 000001B7 R   *	    push   OFFSET buffer
 0000017A  FF 35 0000018D R *	    push   inputHandle
 00000180  E8 00000000 E   *	    call   ReadConsoleA
 00000185  E8 000002F7			call stringToInt
 0000018A  80 3D 00000181 R		cmp ponoviBrojeve, 1
	   01
 00000191  74 D9			je ponoviUnos
					
 00000193  E8 00000456			call OpenFile
 00000198  A1 000004CD R		mov eax, fileHandle
 0000019D  BA 000000BF R		mov edx, OFFSET crtice
 000001A2  B9 00000016			mov ecx, SIZEOF crtice
 000001A7  E8 00000000 E		call WriteToFile
 000001AC  A1 000004CD R		mov eax, fileHandle
 000001B1  BA 000000D5 R		mov edx, OFFSET brPartije
 000001B6  B9 0000000D			mov ecx, SIZEOF brPartije
 000001BB  E8 00000000 E		call WriteToFile	
 000001C0  A1 000004CD R		mov eax, fileHandle
 000001C5  80 05 000004CC R		add brojPartije, 30h
	   30
 000001CC  BA 000004CC R		mov edx,  OFFSET brojPartije 
 000001D1  B9 00000001			mov ecx, SIZEOF brojPartije
 000001D6  E8 00000000 E		call WriteToFile
 000001DB  80 2D 000004CC R		sub brojPartije, 30h
	   30
 000001E2  A1 000004CD R		mov eax, fileHandle
 000001E7  BA 00000182 R		mov edx, OFFSET endline
 000001EC  B9 00000002			mov ecx, SIZEOF endline
 000001F1  E8 00000000 E		call WriteToFile
 000001F6  A1 000004CD R		mov eax, fileHandle
 000001FB  BA 000000E2 R		mov edx, OFFSET kombinacija
 00000200  B9 0000000C			mov ecx, SIZEOF kombinacija
 00000205  E8 00000000 E		call WriteToFile
 0000020A  A1 000004CD R		mov eax, fileHandle
 0000020F  BA 000001B7 R		mov edx, OFFSET buffer
 00000214  8B 0D 000004C3 R		mov ecx, bytesRead
 0000021A  E8 00000000 E		call WriteToFile
 0000021F  A1 000004CD R		mov eax, fileHandle
 00000224  E8 00000000 E		call CloseFile
					
 00000229  A0 000004CB R		mov al, trenutniIgrac
 0000022E  3A 05 000004C7 R		cmp al, brojacIgraca
 00000234  0F 85 FFFFFECA		jne upisivanjeUnetihBrojeva

					;generisemo random brojeve
 0000023A  E8 00000000 E		call Randomize
 0000023F  E8 00000324			call FillArray
 00000244  E8 000002B9			call intToString
 00000249  C6 05 000004CB R		mov  trenutniIgrac, 0h
	   00


					;;; Ispisujemo izvucenu kombinaciju
 00000250  E8 0000045D			call printWinnerNumbers


					; za svakog igraca trazimo njegovu kombinaciju iz fajla 
					; poredimo i upisujemo bodove i izvucenu komb.
 00000255			upisOsvojenihPoena:
 00000255  FE 05 000004CB R		inc trenutniIgrac
 0000025B  E8 000003E1			call readNumbersFromFile
 00000260  E8 00000329			call compareBuffers
					
 00000265  E8 000001BB			call getFilename

 0000026A  E8 0000037F			call OpenFile

 0000026F  A1 000004CD R		mov eax, fileHandle
 00000274  BA 000000EE R		mov edx, OFFSET izvuceniBrojevi
 00000279  B9 00000011			mov ecx, SIZEOF izvuceniBrojevi
 0000027E  E8 00000000 E		call WriteToFile


 00000283  A1 000004CD R		mov eax, fileHandle
 00000288  BA 00000092 R		mov edx, OFFSET stringBuffer
 0000028D  8B 0D 000000B1 R		mov ecx, stringBufferSize
 00000293  E8 00000000 E		call WriteToFile

 00000298  A1 000004CD R		mov eax, fileHandle
 0000029D  BA 00000112 R		mov edx, OFFSET brojPoena
 000002A2  B9 00000015			mov ecx, SIZEOF brojPoena
 000002A7  E8 00000000 E		call WriteToFile
					
 000002AC  A1 000004CD R		mov eax, fileHandle
 000002B1  BA 00000087 R		mov edx, OFFSET nulaPoena
 000002B6  B9 00000003			mov ecx, 3
 000002BB  33 DB			xor ebx, ebx
 000002BD  8A 1D 00000083 R		mov bl, osvojeniPoeni
 000002C3  80 FB 0A			cmp bl, 10
 000002C6  75 0C			jne pedeset
 000002C8  BA 0000008A R		mov edx, OFFSET desetPoena
 000002CD  B9 00000004			mov ecx, 4
 000002D2  EB 0C			jmp ispisaniOsvojeniPoeni
 000002D4			pedeset:
 000002D4  76 0A			jna ispisaniOsvojeniPoeni
 000002D6  BA 0000008E R		mov edx, OFFSET pedesetPoena
 000002DB  B9 00000004			mov ecx, 4

 000002E0			ispisaniOsvojeniPoeni:
 000002E0  E8 00000000 E		call WriteToFile	
					
 000002E5  A1 000004CD R		mov eax, fileHandle
 000002EA  E8 00000000 E		call CloseFile

 000002EF  A0 000004CB R		mov al, trenutniIgrac
 000002F4  3A 05 000004C7 R		cmp al, brojacIgraca
 000002FA  0F 85 FFFFFF55		jne upisOsvojenihPoena
					

 00000300  FE 05 000004CC R		inc brojPartije
 00000306  A0 000004CC R		mov al, brojPartije
 0000030B  3C 06			cmp al, 6
 0000030D  0F 85 FFFFFDE0		jne sledecaPartija



				;;; Podesavanja za proceduru readNumersFromFile za pretragu rezultata iz pojedinacnih rundi
 00000313  B0 73			mov al, 's'
 00000315  A2 00000184 R		mov pretraga, al
 0000031A  B8 0000000E			mov eax, 14
 0000031F  A3 00000185 R		mov pretragaOffset, eax
					
 00000324  C6 05 000004CB R		mov trenutniIgrac, 1
	   01
 0000032B  C6 05 00000085 R		mov pobednik, 1	
	   01

 00000332			racunaj2:
 00000332  C6 05 000004CC R		mov brojPartije, 0
	   00
 00000339  C6 05 00000084 R		mov ukupniPoeni, 0 
	   00
 00000340  C6 05 00000078 R		mov intBuffer10, 0
	   00
					

 00000347			racunaj:
 00000347  FE 05 000004CC R		inc brojPartije
 0000034D  E8 000002EF			call readNumbersFromFile
 00000352  A0 00000072 R		mov al, intBuffer
 00000357  00 05 00000084 R		add ukupniPoeni,al
 0000035D  00 05 00000078 R		add intBuffer10, al
 00000363  B8 00000005			mov eax, 5
 00000368  38 05 000004CC R		cmp brojPartije, al
 0000036E  75 D7			jne racunaj

 00000370  E8 000000B0			call getFilename
 00000375  E8 00000274			call OpenFile
 0000037A  A1 000004CD R		mov eax, fileHandle
 0000037F  BA 000000BF R		mov edx, OFFSET crtice
 00000384  B9 00000016			mov ecx, SIZEOF crtice
 00000389  E8 00000000 E		call WriteToFile

 0000038E  A1 000004CD R		mov eax, fileHandle
 00000393  BA 00000127 R		mov edx, OFFSET ukupnoPoena
 00000398  B9 00000017			mov ecx, SIZEOF ukupnoPoena
 0000039D  E8 00000000 E		call WriteToFile

 000003A2  E8 0000015B			call intToString
 000003A7  A1 000004CD R		mov eax, fileHandle
 000003AC  BA 00000092 R		mov edx, OFFSET stringBuffer
 000003B1  B9 00000002			mov ecx, 2
 000003B6  E8 00000000 E		call WriteToFile

 000003BB  A1 000004CD R		mov eax, fileHandle
 000003C0  E8 00000000 E		call CloseFile
					
					;provjeri ko ima najvise
 000003C5  8A 1D 00000086 R		mov bl, pobednikPoeni 
 000003CB  A0 00000084 R		mov al, ukupniPoeni
 000003D0  3A C3			cmp al, bl
 000003D2  76 13			jna	nijeVece
 000003D4  A2 00000086 R		mov pobednikPoeni, al
 000003D9  33 DB			xor ebx, ebx
 000003DB  8A 1D 000004CB R		mov bl, trenutniIgrac
 000003E1  88 1D 00000085 R		mov pobednik, bl
 000003E7			nijeVece:
 000003E7  FE 05 000004CB R		inc trenutniIgrac
 000003ED  A0 000004CB R		mov al, trenutniIgrac
 000003F2  3A 05 000004C7 R		cmp al, brojacIgraca
 000003F8  0F 86 FFFFFF34		jna racunaj2


					
					;;Ispisivanje pobednika 
 000003FE  E8 00000391			call printPobednik
					


					INVOKE ExitProcess,0
 00000403  6A 00	   *	    push   +000000000h
 00000405  E8 00000000 E   *	    call   ExitProcess
 0000040A			main ENDP





				;procedures
				;--------------------------------------------------------
				;KONKATENACIJA
 0000040A			STRCAT PROC USES eax ecx 

						; Dodji do kraja stringa
 0000040A  50		   *	    push   eax
 0000040B  51		   *	    push   ecx
 0000040C  B8 00000000				mov eax, 0
 00000411  B9 00000022				mov ecx, LENGTHOF filename 
 00000416  FC					cld
 00000417  F2/ AE				repne SCASB 
 00000419  4F					dec edi
 0000041A  8B CB				mov ecx, ebx

 0000041C  F3/ A4				rep MOVSB

 0000041E  B3 00				mov bl,0
 00000420  88 1F				mov [edi],bl

				ret
 00000422  59		   *	    pop    ecx
 00000423  58		   *	    pop    eax
 00000424  C3		   *	    ret    00000h
 00000425			STRCAT ENDP


				;--------------------------------------------------------
 00000425			getFilename PROC USES edi esi ebx eax ecx

 00000425  57		   *	    push   edi
 00000426  56		   *	    push   esi
 00000427  53		   *	    push   ebx
 00000428  50		   *	    push   eax
 00000429  51		   *	    push   ecx
 0000042A  C6 05 00000042 R		mov filename, 0
	   00
 00000431  BF 00000042 R		mov edi, offset filename
 00000436  BE 00000064 R		mov esi, offset filenameBase 
 0000043B  BB 0000000A			mov ebx, LENGTHOF filenameBase
 00000440  E8 FFFFFFC5			call STRCAT 

 00000445  80 05 000004CB R		add trenutniIgrac, 30h
	   30
 0000044C  BF 00000042 R		mov edi, offset filename
 00000451  BE 000004CB R		mov esi, offset trenutniIgrac 
 00000456  BB 00000001			mov ebx, LENGTHOF trenutniIgrac
 0000045B  E8 FFFFFFAA			call STRCAT 
 00000460  80 2D 000004CB R		sub trenutniIgrac, 30h	
	   30

 00000467  BF 00000042 R		mov edi, offset filename
 0000046C  BE 0000006E R		mov esi, offset filenameEnd
 00000471  BB 00000004			mov ebx, LENGTHOF filenameEnd
 00000476  E8 FFFFFF8F			call STRCAT 

				ret
 0000047B  59		   *	    pop    ecx
 0000047C  58		   *	    pop    eax
 0000047D  5B		   *	    pop    ebx
 0000047E  5E		   *	    pop    esi
 0000047F  5F		   *	    pop    edi
 00000480  C3		   *	    ret    00000h
 00000481			getFilename ENDP

				;--------------------------------------------------------
 00000481			stringToInt PROC USES  eax ebx esi edi ecx
 00000481  50		   *	    push   eax
 00000482  53		   *	    push   ebx
 00000483  56		   *	    push   esi
 00000484  57		   *	    push   edi
 00000485  51		   *	    push   ecx
 00000486  C6 05 00000181 R		mov ponoviBrojeve, 0
	   00
 0000048D  BE 000001B7 R		mov esi, OFFSET buffer
 00000492  BF 00000072 R		mov edi, OFFSET intBuffer

 00000497			pocetak:
 00000497  33 C0			xor eax,eax
 00000499  33 DB			xor ebx,ebx

 0000049B  AC				LODSB
 0000049C  3C 0D			cmp al, 0Dh
 0000049E  74 36			je kraj2
 000004A0  3C 20			cmp al, 20h
 000004A2  74 F3			je pocetak

 000004A4  8B D8			mov ebx, eax
 000004A6  83 EB 30			sub ebx, 30h
 000004A9  AC				LODSB
 000004AA  83 F8 20			cmp eax, 20h
 000004AD  74 0C			je upis
 000004AF  3C 0D			cmp al, 0Dh
 000004B1  74 21			je kraj

 000004B3  6B DB 0A			imul ebx, 10
 000004B6  83 E8 30			sub eax, 30h
 000004B9  03 D8			add ebx, eax

 000004BB			upis:
					;; radi se provera brojeva za unete brojeve korisnika
 000004BB  B0 73			mov al, 's'
 000004BD  3A 05 00000184 R		cmp al, pretraga
 000004C3  74 0A			je neProveravajVelicinu
 000004C5  80 FB 00			cmp bl, 0
 000004C8  7C 12			jl ponovoUnesiBrojeve
 000004CA  80 FB 4D			cmp bl,77
 000004CD  7F 0D			jg ponovoUnesiBrojeve

 000004CF			neProveravajVelicinu:
 000004CF  88 1F			mov [edi], bl
 000004D1  47				inc edi
 000004D2  EB C3			jmp pocetak

 000004D4				kraj:
 000004D4  88 1F			mov [edi], bl


 000004D6				kraj2:
					ret
 000004D6  59		   *	    pop    ecx
 000004D7  5F		   *	    pop    edi
 000004D8  5E		   *	    pop    esi
 000004D9  5B		   *	    pop    ebx
 000004DA  58		   *	    pop    eax
 000004DB  C3		   *	    ret    00000h

 000004DC			ponovoUnesiBrojeve:
					INVOKE WriteConsole, outputHandle, ADDR ponovoUnesiBrojeveTekst, LENGTHOF ponovoUnesiBrojeveTekst ,	ADDR bytesWritten, 0
 000004DC  6A 00	   *	    push   +000000000h
 000004DE  68 00000191 R   *	    push   OFFSET bytesWritten
 000004E3  6A 17	   *	    push   +000000017h
 000004E5  68 0000016A R   *	    push   OFFSET ponovoUnesiBrojeveTekst
 000004EA  FF 35 00000189 R *	    push   outputHandle
 000004F0  E8 00000000 E   *	    call   WriteConsoleA
 000004F5  C6 05 00000181 R		mov ponoviBrojeve, 1
	   01
					ret
 000004FC  59		   *	    pop    ecx
 000004FD  5F		   *	    pop    edi
 000004FE  5E		   *	    pop    esi
 000004FF  5B		   *	    pop    ebx
 00000500  58		   *	    pop    eax
 00000501  C3		   *	    ret    00000h


 00000502			stringToInt ENDP

				;--------------------------------------------------------
 00000502			intToString PROC USES eax ecx esi edi ebx
 00000502  50		   *	    push   eax
 00000503  51		   *	    push   ecx
 00000504  56		   *	    push   esi
 00000505  57		   *	    push   edi
 00000506  53		   *	    push   ebx
 00000507  C7 05 000000B1 R		mov stringBufferSize,0
	   00000000
 00000511  B9 0000000A			mov ecx, 10
 00000516  33 C0			xor eax,eax
					

 00000518  B3 0A			mov bl, 0Ah
 0000051A  BF 00000092 R		mov edi, OFFSET stringBuffer
 0000051F  BE 00000078 R		mov esi, OFFSET intBuffer10
 00000524			sledeciBroj:	
 00000524  33 C0			xor eax, eax
 00000526  AC				LODSB
 00000527  F6 F3			div bl

 00000529  3C 00			cmp al, 0
 0000052B  74 0B			je	manjeOdDeset
 0000052D  04 30			add al, 30h
 0000052F  88 07			mov [edi], al
 00000531  47				inc edi
 00000532  FF 05 000000B1 R		inc stringBufferSize
 00000538			manjeOdDeset:
 00000538  80 C4 30			add ah, 30h
 0000053B  88 27			mov [edi], ah
 0000053D  47				inc edi
 0000053E  FF 05 000000B1 R		inc stringBufferSize
 00000544  B4 20			mov ah, 20h
 00000546  88 27			mov [edi], ah
 00000548  47				inc edi
 00000549  FF 05 000000B1 R		inc stringBufferSize
 0000054F  49				dec ecx
 00000550  75 D2			jnz sledeciBroj
					
 00000552  4F				dec edi
 00000553  B4 0D			mov ah, 0Dh
 00000555  88 27			mov [edi],ah
 00000557  47				inc edi
 00000558  FF 05 000000B1 R		inc stringBufferSize
 0000055E  B4 0A			mov ah, 0Ah	
 00000560  88 27			mov [edi],ah
					;inc stringBufferSize

				ret
 00000562  5B		   *	    pop    ebx
 00000563  5F		   *	    pop    edi
 00000564  5E		   *	    pop    esi
 00000565  59		   *	    pop    ecx
 00000566  58		   *	    pop    eax
 00000567  C3		   *	    ret    00000h
 00000568			intToString ENDP


				;--------------------------------------------------------
 00000568			FillArray PROC USES eax edi ecx edx
				;	pArray:PTR DWORD, ; pointer to array;
				;	Count:DWORD, ; number of elements;
				;	LowerRange:SDWORD, ; lower range
				;	UpperRange:SDWORD ; upper range
					
				;
				; Fills an array with a random sequence of 32-bit signed
				; integers between LowerRange and (UpperRange - 1).
				; Returns: nothing
				;-----------------------------------------------------------
 00000568  50		   *	    push   eax
 00000569  57		   *	    push   edi
 0000056A  51		   *	    push   ecx
 0000056B  52		   *	    push   edx
 0000056C  BF 00000078 R		mov edi, OFFSET intBuffer10 ; EDI points to the array
 00000571  B9 0000000A			mov ecx,10 ; loop counter
 00000576  BA 0000004E			mov edx,78
 0000057B  83 EA 00			sub edx,0   ; EDX = absolute range (0..n)
 0000057E  FC				cld ; clear direction flag
 0000057F  8B C2		L1: mov eax,edx ; get absolute range
 00000581  E8 00000000 E		call RandomRange
 00000586  AA				stosb ; store EAX into [edi]
 00000587  E2 F6			loop L1
				ret
 00000589  5A		   *	    pop    edx
 0000058A  59		   *	    pop    ecx
 0000058B  5F		   *	    pop    edi
 0000058C  58		   *	    pop    eax
 0000058D  C3		   *	    ret    00000h
 0000058E			FillArray ENDP



				;--------------------------------------------------------
 0000058E			compareBuffers PROC USES eax esi edi ebx ecx
 0000058E  50		   *	    push   eax
 0000058F  56		   *	    push   esi
 00000590  57		   *	    push   edi
 00000591  53		   *	    push   ebx
 00000592  51		   *	    push   ecx
 00000593  C6 05 00000082 R		mov brojPogodaka, 0				;clear brojPogodaka
	   00
 0000059A  B9 00000007			mov ecx, 7						;counter to go trough 6 buffer members, starts from 7 because it dec's at the start of the loop	
 0000059F  BE 00000072 R		mov esi, OFFSET intBuffer		;we use esi as a pointer to intBuffer(6)
 000005A4  4E				dec esi							;we dec here, so that we can inc in loop from start

 000005A5			proveriSledeciOd6:
 000005A5  46				inc esi							;here we inc
 000005A6  BB 0000000A			mov ebx, 10						;counter to help go through all of the buffer10, resets for every int of buffer6 
 000005AB  49				dec ecx
 000005AC  74 17			jz  gotovaProvera
 000005AE  BF 00000078 R		mov edi, OFFSET intBuffer10		;set EDI to show at the start of buffer10
 000005B3			proveriSledeciOd10:
 000005B3  A6				CMPSB							;compares [ESI] & [EDI], and increments them both, we dont want esi incremented tho
 000005B4  74 06			je	postoji
 000005B6  4E				dec esi
 000005B7  4B				dec ebx
 000005B8  74 EB			jz  proveriSledeciOd6
 000005BA  EB F7			jmp proveriSledeciOd10

 000005BC			postoji:
 000005BC  4E				dec esi							;because CMPSB auto inc'd esi, we dec it here
 000005BD  FE 05 00000082 R		inc brojPogodaka
 000005C3  EB E0			jmp proveriSledeciOd6

 000005C5			gotovaProvera:	
 000005C5  C6 05 00000083 R		mov osvojeniPoeni,0
	   00
 000005CC  B3 05			mov bl, 5 
 000005CE  38 1D 00000082 R		cmp brojPogodaka, bl
 000005D4  75 09			jne sest
 000005D6  C6 05 00000083 R		mov osvojeniPoeni, 10
	   0A
 000005DD  EB 09			jmp odredjenBrojPoena
 000005DF  76 07		sest: jna odredjenBrojPoena
 000005E1  C6 05 00000083 R		mov osvojeniPoeni, 50
	   32
 000005E8			odredjenBrojPoena:



				ret
 000005E8  59		   *	    pop    ecx
 000005E9  5B		   *	    pop    ebx
 000005EA  5F		   *	    pop    edi
 000005EB  5E		   *	    pop    esi
 000005EC  58		   *	    pop    eax
 000005ED  C3		   *	    ret    00000h
 000005EE			compareBuffers ENDP


				;-------------------------------------------
 000005EE			OpenFile PROC USES ebx edx ecx edi eax
					;Opens existing file for appending
 000005EE  53		   *	    push   ebx
 000005EF  52		   *	    push   edx
 000005F0  51		   *	    push   ecx
 000005F1  57		   *	    push   edi
 000005F2  50		   *	    push   eax
					INVOKE CreateFile,ADDR filename,GENERIC_WRITE,DO_NOT_SHARE,NULL,OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,0
 000005F3  6A 00	   *	    push   +000000000h
 000005F5  68 00000080	   *	    push   +000000080h
 000005FA  6A 03	   *	    push   +000000003h
 000005FC  6A 00	   *	    push   +000000000h
 000005FE  6A 00	   *	    push   +000000000h
 00000600  68 40000000	   *	    push   +040000000h
 00000605  68 00000042 R   *	    push   OFFSET filename
 0000060A  E8 00000000 E   *	    call   CreateFileA
 0000060F  83 F8 FF			cmp eax,INVALID_HANDLE_VALUE
 00000612  74 1C			je izadji
 00000614  A3 000004CD R		mov	fileHandle,eax
					INVOKE SetFilePointer,	fileHandle,	0, 	0, 	FILE_END
 00000619  6A 02	   *	    push   +000000002h
 0000061B  6A 00	   *	    push   +000000000h
 0000061D  6A 00	   *	    push   +000000000h
 0000061F  FF 35 000004CD R *	    push   fileHandle
 00000625  E8 00000000 E   *	    call   SetFilePointer
				ret
 0000062A  58		   *	    pop    eax
 0000062B  5F		   *	    pop    edi
 0000062C  59		   *	    pop    ecx
 0000062D  5A		   *	    pop    edx
 0000062E  5B		   *	    pop    ebx
 0000062F  C3		   *	    ret    00000h
 00000630			izadji:
					;;; Ovde nikada ne treba da udje
 00000630  B8 00000042 R		mov eax, OFFSET filename
 00000635  BB 00000022			mov ebx, LENGTHOF filename
					INVOKE ExitProcess,0
 0000063A  6A 00	   *	    push   +000000000h
 0000063C  E8 00000000 E   *	    call   ExitProcess

 00000641			OpenFile ENDP


				;---------------------------------------------

 00000641			ReadNumbersFromFile PROC USES ebx edx ecx edi eax
					
 00000641  53		   *	    push   ebx
 00000642  52		   *	    push   edx
 00000643  51		   *	    push   ecx
 00000644  57		   *	    push   edi
 00000645  50		   *	    push   eax
 00000646  E8 FFFFFDDA			call getFilename
 0000064B  BA 00000042 R		mov edx, OFFSET filename
 00000650  E8 00000000 E		call OpenInputFile
 00000655  A3 000004CD R		mov fileHandle, eax

 0000065A  8A 1D 000004CC R		mov bl, brojPartije
 00000660  BA 00000207 R		mov edx,OFFSET fileBuffer
 00000665  B9 000002BC			mov ecx,FileBuffSize
 0000066A  E8 00000000 E		call ReadFromFile

 0000066F  A1 000004CD R		mov eax, fileHandle
 00000674  E8 00000000 E		call CloseFile
					

 00000679  33 C0			xor eax,eax
 0000067B  A0 00000184 R		mov al, pretraga
 00000680  BF 00000207 R		mov edi, OFFSET fileBuffer
 00000685  B9 000002BC			mov ecx, SIZEOF fileBuffer	
 0000068A			sledece:	
 0000068A  F2/ AE			repne SCASB
 0000068C  FE CB			dec bl
 0000068E  75 FA			jnz sledece
					
 00000690  03 3D 00000185 R		add edi, pretragaOffset
 00000696  8B F7			mov esi, edi
 00000698  BF 000001B7 R		mov edi, OFFSET buffer

 0000069D			nijeEnter:	
 0000069D  A4				MOVSB
 0000069E  B8 0000000A			mov eax, 0Ah
 000006A3  39 06			cmp [esi], eax
 000006A5  75 F6			jne nijeEnter

 000006A7  E8 FFFFFDD5			call stringToInt
					ret
 000006AC  58		   *	    pop    eax
 000006AD  5F		   *	    pop    edi
 000006AE  59		   *	    pop    ecx
 000006AF  5A		   *	    pop    edx
 000006B0  5B		   *	    pop    ebx
 000006B1  C3		   *	    ret    00000h
 000006B2			ReadNumbersFromFile ENDP


 000006B2			printWinnerNumbers PROC USES esi eax
					;Postavljanje kursora na sredinu (otprilike)
 000006B2  56		   *	    push   esi
 000006B3  50		   *	    push   eax
					INVOKE GetConsoleScreenBufferInfo, outputHandle, ADDR consoleInfo
 000006B4  68 00000195 R   *	    push   OFFSET consoleInfo
 000006B9  FF 35 00000189 R *	    push   outputHandle
 000006BF  E8 00000000 E   *	    call   GetConsoleScreenBufferInfo
 000006C4  BE 00000195 R		mov esi, OFFSET ptrConsoleInfo
 000006C9  66| 8B 06			mov ax, [esi]
 000006CC  66| D1 E8			shr ax, 1
 000006CF  66| 83 E8 0F			sub ax, 15
 000006D3  66| A3			mov ptrCursorPosition, ax
	   000001AF R
 000006D9  66| 8B 46 06			mov ax, [esi+6]
 000006DD  BE 000001AF R		mov esi, OFFSET ptrCursorPosition
 000006E2  66| 89 46 02			mov [esi+2], ax
					INVOKE SetConsoleCursorPosition, outputHandle, cursorPosition
 000006E6  FF 35 000001AF R *	    push   dword  ptr cursorPosition
 000006EC  FF 35 00000189 R *	    push   outputHandle
 000006F2  E8 00000000 E   *	    call   SetConsoleCursorPosition
					
					INVOKE WriteConsole, outputHandle, ADDR dobijeniBrojevi, LENGTHOF dobijeniBrojevi,	ADDR bytesWritten, 0
 000006F7  6A 00	   *	    push   +000000000h
 000006F9  68 00000191 R   *	    push   OFFSET bytesWritten
 000006FE  6A 13	   *	    push   +000000013h
 00000700  68 000000FF R   *	    push   OFFSET dobijeniBrojevi
 00000705  FF 35 00000189 R *	    push   outputHandle
 0000070B  E8 00000000 E   *	    call   WriteConsoleA
					;Postavljanje kursora na sredinu (otprilike)
					INVOKE GetConsoleScreenBufferInfo, outputHandle, ADDR consoleInfo
 00000710  68 00000195 R   *	    push   OFFSET consoleInfo
 00000715  FF 35 00000189 R *	    push   outputHandle
 0000071B  E8 00000000 E   *	    call   GetConsoleScreenBufferInfo
 00000720  BE 00000195 R		mov esi, OFFSET ptrConsoleInfo
 00000725  66| 8B 06			mov ax, [esi]
 00000728  66| D1 E8			shr ax, 1
 0000072B  66| 83 E8 0F			sub ax, 15
 0000072F  66| A3			mov ptrCursorPosition, ax
	   000001AF R
 00000735  66| 8B 46 06			mov ax, [esi+6]
 00000739  BE 000001AF R		mov esi, OFFSET ptrCursorPosition
 0000073E  66| 89 46 02			mov [esi+2], ax
					INVOKE SetConsoleCursorPosition, outputHandle, cursorPosition
 00000742  FF 35 000001AF R *	    push   dword  ptr cursorPosition
 00000748  FF 35 00000189 R *	    push   outputHandle
 0000074E  E8 00000000 E   *	    call   SetConsoleCursorPosition


 00000753  BE 00000092 R		mov esi, OFFSET stringBuffer
 00000758			sledeciKarakter:
 00000758  AC				LODSB
 00000759  A2 00000169 R		mov byteIspis, al
					INVOKE WriteConsole, outputHandle, addr byteIspis, 1,	ADDR bytesWritten, 0
 0000075E  6A 00	   *	    push   +000000000h
 00000760  68 00000191 R   *	    push   OFFSET bytesWritten
 00000765  6A 01	   *	    push   +000000001h
 00000767  68 00000169 R   *	    push   OFFSET byteIspis
 0000076C  FF 35 00000189 R *	    push   outputHandle
 00000772  E8 00000000 E   *	    call   WriteConsoleA
 00000777  A0 00000169 R		mov al, byteIspis
 0000077C  3C 0A			cmp al, 0Ah
 0000077E  74 11			je kraj
 00000780  83 F8 20			cmp eax, 20h
 00000783  75 D3			jne sledeciKarakter
					invoke sleep, 1000
 00000785  68 000003E8	   *	    push   +0000003E8h
 0000078A  E8 00000000 E   *	    call   Sleep
 0000078F  EB C7			jmp sledeciKarakter
 00000791			kraj:
				;INVOKE WriteConsole, outputHandle, addr byteIspis, 1,	ADDR bytesWritten, 0
				ret
 00000791  58		   *	    pop    eax
 00000792  5E		   *	    pop    esi
 00000793  C3		   *	    ret    00000h
 00000794			printWinnerNumbers ENDP

 00000794			printPobednik PROC USES eax esi
					;Postavljanje kursora na sredinu (otprilike)
 00000794  50		   *	    push   eax
 00000795  56		   *	    push   esi
					INVOKE GetConsoleScreenBufferInfo, outputHandle, ADDR consoleInfo
 00000796  68 00000195 R   *	    push   OFFSET consoleInfo
 0000079B  FF 35 00000189 R *	    push   outputHandle
 000007A1  E8 00000000 E   *	    call   GetConsoleScreenBufferInfo
 000007A6  BE 00000195 R		mov esi, OFFSET ptrConsoleInfo
 000007AB  66| 8B 06			mov ax, [esi]
 000007AE  66| D1 E8			shr ax, 1
 000007B1  66| 83 E8 0F			sub ax, 15
 000007B5  66| A3			mov ptrCursorPosition, ax
	   000001AF R
 000007BB  66| 8B 46 06			mov ax, [esi+6]
 000007BF  BE 000001AF R		mov esi, OFFSET ptrCursorPosition
 000007C4  66| 89 46 02			mov [esi+2], ax
					INVOKE SetConsoleCursorPosition, outputHandle, cursorPosition
 000007C8  FF 35 000001AF R *	    push   dword  ptr cursorPosition
 000007CE  FF 35 00000189 R *	    push   outputHandle
 000007D4  E8 00000000 E   *	    call   SetConsoleCursorPosition

					INVOKE SetConsoleTextAttribute, outputHandle, 004h
 000007D9  6A 04	   *	    push   +000000004h
 000007DB  FF 35 00000189 R *	    push   outputHandle
 000007E1  E8 00000000 E   *	    call   SetConsoleTextAttribute

					INVOKE WriteConsole, outputHandle, ADDR pobednikTekst, LENGTHOF pobednikTekst,	ADDR bytesWritten, 0
 000007E6  6A 00	   *	    push   +000000000h
 000007E8  68 00000191 R   *	    push   OFFSET bytesWritten
 000007ED  6A 17	   *	    push   +000000017h
 000007EF  68 0000013E R   *	    push   OFFSET pobednikTekst
 000007F4  FF 35 00000189 R *	    push   outputHandle
 000007FA  E8 00000000 E   *	    call   WriteConsoleA
 000007FF  80 05 00000085 R		add pobednik,30h
	   30
					INVOKE WriteConsole, outputHandle, ADDR pobednik, 1,	ADDR bytesWritten, 0
 00000806  6A 00	   *	    push   +000000000h
 00000808  68 00000191 R   *	    push   OFFSET bytesWritten
 0000080D  6A 01	   *	    push   +000000001h
 0000080F  68 00000085 R   *	    push   OFFSET pobednik
 00000814  FF 35 00000189 R *	    push   outputHandle
 0000081A  E8 00000000 E   *	    call   WriteConsoleA
					
				ret
 0000081F  5E		   *	    pop    esi
 00000820  58		   *	    pop    eax
 00000821  C3		   *	    ret    00000h
 00000822			printPobednik ENDP

 00000822			printPreostalePartije PROC USES eax esi
					;Postavljanje kursora na sredinu (otprilike)
 00000822  50		   *	    push   eax
 00000823  56		   *	    push   esi
					INVOKE GetConsoleScreenBufferInfo, outputHandle, ADDR consoleInfo
 00000824  68 00000195 R   *	    push   OFFSET consoleInfo
 00000829  FF 35 00000189 R *	    push   outputHandle
 0000082F  E8 00000000 E   *	    call   GetConsoleScreenBufferInfo
 00000834  BE 00000195 R		mov esi, OFFSET ptrConsoleInfo
 00000839  66| 8B 06			mov ax, [esi]
 0000083C  66| 83 E8 14			sub ax, 20
 00000840  66| A3			mov ptrCursorPosition, ax
	   000001AF R
 00000846  66| 8B 46 06			mov ax, [esi+6]
 0000084A  BE 000001AF R		mov esi, OFFSET ptrCursorPosition
 0000084F  66| 89 46 02			mov [esi+2], ax
					INVOKE SetConsoleCursorPosition, outputHandle, cursorPosition
 00000853  FF 35 000001AF R *	    push   dword  ptr cursorPosition
 00000859  FF 35 00000189 R *	    push   outputHandle
 0000085F  E8 00000000 E   *	    call   SetConsoleCursorPosition

					INVOKE WriteConsole, outputHandle, ADDR preostalePartijeTekst, LENGTHOF preostalePartijeTekst,	ADDR bytesWritten, 0
 00000864  6A 00	   *	    push   +000000000h
 00000866  68 00000191 R   *	    push   OFFSET bytesWritten
 0000086B  6A 13	   *	    push   +000000013h
 0000086D  68 00000155 R   *	    push   OFFSET preostalePartijeTekst
 00000872  FF 35 00000189 R *	    push   outputHandle
 00000878  E8 00000000 E   *	    call   WriteConsoleA

 0000087D  A0 000004CC R		mov al, brojPartije
 00000882  B3 05			mov bl, 5
 00000884  2A D8			sub bl,al
 00000886  80 C3 30			add bl,30h
 00000889  88 1D 00000168 R		mov preostalePartije, bl
					

					INVOKE WriteConsole, outputHandle, ADDR preostalePartije, 1,	ADDR bytesWritten, 0
 0000088F  6A 00	   *	    push   +000000000h
 00000891  68 00000191 R   *	    push   OFFSET bytesWritten
 00000896  6A 01	   *	    push   +000000001h
 00000898  68 00000168 R   *	    push   OFFSET preostalePartije
 0000089D  FF 35 00000189 R *	    push   outputHandle
 000008A3  E8 00000000 E   *	    call   WriteConsoleA

					INVOKE WriteConsole, outputHandle, ADDR endline, LENGTHOF endline,	ADDR bytesWritten, 0
 000008A8  6A 00	   *	    push   +000000000h
 000008AA  68 00000191 R   *	    push   OFFSET bytesWritten
 000008AF  6A 02	   *	    push   +000000002h
 000008B1  68 00000182 R   *	    push   OFFSET endline
 000008B6  FF 35 00000189 R *	    push   outputHandle
 000008BC  E8 00000000 E   *	    call   WriteConsoleA

					INVOKE SetConsoleCursorPosition, outputHandle, kursorNaPocetak
 000008C1  FF 35 000001B3 R *	    push   dword  ptr kursorNaPocetak
 000008C7  FF 35 00000189 R *	    push   outputHandle
 000008CD  E8 00000000 E   *	    call   SetConsoleCursorPosition


				ret
 000008D2  5E		   *	    pop    esi
 000008D3  58		   *	    pop    eax
 000008D4  C3		   *	    ret    00000h
 000008D5			printPreostalePartije ENDP

				END main
Microsoft (R) Macro Assembler Version 14.13.26131.1	    06/25/18 21:13:28
projekat.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004D1 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008D5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillArray  . . . . . . . . . . .	P Near	 00000568 _TEXT	Length= 00000026 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000057F _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenFile . . . . . . . . . . . .	P Near	 000005EE _TEXT	Length= 00000053 Public STDCALL
  izadji . . . . . . . . . . . .	L Near	 00000630 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadNumbersFromFile  . . . . . .	P Near	 00000641 _TEXT	Length= 00000071 Public STDCALL
  sledece  . . . . . . . . . . .	L Near	 0000068A _TEXT	
  nijeEnter  . . . . . . . . . .	L Near	 0000069D _TEXT	
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
STRCAT . . . . . . . . . . . . .	P Near	 0000040A _TEXT	Length= 0000001B Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
compareBuffers . . . . . . . . .	P Near	 0000058E _TEXT	Length= 00000060 Public STDCALL
  proveriSledeciOd6  . . . . . .	L Near	 000005A5 _TEXT	
  proveriSledeciOd10 . . . . . .	L Near	 000005B3 _TEXT	
  postoji  . . . . . . . . . . .	L Near	 000005BC _TEXT	
  gotovaProvera  . . . . . . . .	L Near	 000005C5 _TEXT	
  sest . . . . . . . . . . . . .	L Near	 000005DF _TEXT	
  odredjenBrojPoena  . . . . . .	L Near	 000005E8 _TEXT	
getFilename  . . . . . . . . . .	P Near	 00000425 _TEXT	Length= 0000005C Public STDCALL
intToString  . . . . . . . . . .	P Near	 00000502 _TEXT	Length= 00000066 Public STDCALL
  sledeciBroj  . . . . . . . . .	L Near	 00000524 _TEXT	
  manjeOdDeset . . . . . . . . .	L Near	 00000538 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000040A Public STDCALL
  skok1  . . . . . . . . . . . .	L Near	 00000070 _TEXT	
  pravljenjeFajlova  . . . . . .	L Near	 00000076 _TEXT	
  sledecaPartija . . . . . . . .	L Near	 000000F3 _TEXT	
  upisivanjeUnetihBrojeva  . . .	L Near	 00000104 _TEXT	
  ponoviUnos . . . . . . . . . .	L Near	 0000016C _TEXT	
  upisOsvojenihPoena . . . . . .	L Near	 00000255 _TEXT	
  pedeset  . . . . . . . . . . .	L Near	 000002D4 _TEXT	
  ispisaniOsvojeniPoeni  . . . .	L Near	 000002E0 _TEXT	
  racunaj2 . . . . . . . . . . .	L Near	 00000332 _TEXT	
  racunaj  . . . . . . . . . . .	L Near	 00000347 _TEXT	
  nijeVece . . . . . . . . . . .	L Near	 000003E7 _TEXT	
printPobednik  . . . . . . . . .	P Near	 00000794 _TEXT	Length= 0000008E Public STDCALL
printPreostalePartije  . . . . .	P Near	 00000822 _TEXT	Length= 000000B3 Public STDCALL
printWinnerNumbers . . . . . . .	P Near	 000006B2 _TEXT	Length= 000000E2 Public STDCALL
  sledeciKarakter  . . . . . . .	L Near	 00000758 _TEXT	
  kraj . . . . . . . . . . . . .	L Near	 00000791 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
stringToInt  . . . . . . . . . .	P Near	 00000481 _TEXT	Length= 00000081 Public STDCALL
  pocetak  . . . . . . . . . . .	L Near	 00000497 _TEXT	
  upis . . . . . . . . . . . . .	L Near	 000004BB _TEXT	
  neProveravajVelicinu . . . . .	L Near	 000004CF _TEXT	
  kraj . . . . . . . . . . . . .	L Near	 000004D4 _TEXT	
  kraj2  . . . . . . . . . . . .	L Near	 000004D6 _TEXT	
  ponovoUnesiBrojeve . . . . . .	L Near	 000004DC _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BufSize  . . . . . . . . . . . .	Number	 00000050h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FileBuffSize . . . . . . . . . .	Number	 000002BCh   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brIgr  . . . . . . . . . . . . .	DWord	 000004C7 _DATA	
brPartije  . . . . . . . . . . .	Byte	 000000D5 _DATA	
brojIgracaSize . . . . . . . . .	DWord	 00000017 _DATA	
brojIgraca . . . . . . . . . . .	Byte	 00000000 _DATA	
brojPartije  . . . . . . . . . .	Byte	 000004CC _DATA	
brojPoena  . . . . . . . . . . .	Byte	 00000112 _DATA	
brojPogodaka . . . . . . . . . .	Byte	 00000082 _DATA	
brojacIgraca . . . . . . . . . .	Byte	 000004C7 _DATA	
brojeviIgracaSize  . . . . . . .	DWord	 0000003A _DATA	
brojeviIgraca  . . . . . . . . .	Byte	 00000021 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 000001B7 _DATA	
byteIspis  . . . . . . . . . . .	Byte	 00000169 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 000004C3 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000191 _DATA	
consoleInfo  . . . . . . . . . .	CONSOLE_SCREEN_BUFFER_INFO  00000195 _DATA	
crtice . . . . . . . . . . . . .	Byte	 000000BF _DATA	
cursorPosition . . . . . . . . .	COORD	 000001AF _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
desetPoena . . . . . . . . . . .	Byte	 0000008A _DATA	
dobijeniBrojevi  . . . . . . . .	Byte	 000000FF _DATA	
endline  . . . . . . . . . . . .	Byte	 00000182 _DATA	
endl . . . . . . . . . . . . . .	Text   	 0dh,0ah
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileBuffer . . . . . . . . . . .	Byte	 00000207 _DATA	
fileHandle . . . . . . . . . . .	DWord	 000004CD _DATA	
filenameBase . . . . . . . . . .	Byte	 00000064 _DATA	
filenameEnd  . . . . . . . . . .	Byte	 0000006E _DATA	
filename . . . . . . . . . . . .	Byte	 00000042 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
idIgraca . . . . . . . . . . . .	Byte	 000000B5 _DATA	
igracTekst . . . . . . . . . . .	Byte	 0000001B _DATA	
inputHandle  . . . . . . . . . .	DWord	 0000018D _DATA	
intBuffer10  . . . . . . . . . .	Byte	 00000078 _DATA	
intBuffer  . . . . . . . . . . .	Byte	 00000072 _DATA	
izvuceniBrojevi  . . . . . . . .	Byte	 000000EE _DATA	
kombinacija  . . . . . . . . . .	Byte	 000000E2 _DATA	
kursorNaPocetak  . . . . . . . .	COORD	 000001B3 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nulaPoena  . . . . . . . . . . .	Byte	 00000087 _DATA	
osvojeniPoeni  . . . . . . . . .	Byte	 00000083 _DATA	
outputHandle . . . . . . . . . .	DWord	 00000189 _DATA	
pedesetPoena . . . . . . . . . .	Byte	 0000008E _DATA	
pobednikPoeni  . . . . . . . . .	Byte	 00000086 _DATA	
pobednikTekst  . . . . . . . . .	Byte	 0000013E _DATA	
pobednik . . . . . . . . . . . .	Byte	 00000085 _DATA	
ponoviBrojeve  . . . . . . . . .	Byte	 00000181 _DATA	
ponovoUnesiBrojeveTekst  . . . .	Byte	 0000016A _DATA	
preostalePartijeTekst  . . . . .	Byte	 00000155 _DATA	
preostalePartije . . . . . . . .	Byte	 00000168 _DATA	
pretragaOffset . . . . . . . . .	DWord	 00000185 _DATA	
pretraga . . . . . . . . . . . .	Byte	 00000184 _DATA	
ptrConsoleInfo . . . . . . . . .	Word	 00000195 _DATA	
ptrCursorPosition  . . . . . . .	Word	 000001AF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringBufferSize . . . . . . . .	DWord	 000000B1 _DATA	
stringBuffer . . . . . . . . . .	Byte	 00000092 _DATA	
tajmer . . . . . . . . . . . . .	DWord	 0000003E _DATA	
trenutniIgrac  . . . . . . . . .	Byte	 000004CB _DATA	
ukupniPoeni  . . . . . . . . . .	Byte	 00000084 _DATA	
ukupnoPoena  . . . . . . . . . .	Byte	 00000127 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xCursor  . . . . . . . . . . . .	Word	 000001AB _DATA	
yCursor  . . . . . . . . . . . .	Word	 000001AD _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
